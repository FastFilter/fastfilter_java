# FastFilter Java Environment Configuration
# Copy this file to .env and customize for your platform
# .env files are loaded by: Maven, Bazel, Nix, and various IDE integrations

# =============================================================================
# JDK Configuration
# =============================================================================

# Java Home - Adjust for your JDK 24 installation
# macOS (Homebrew): /opt/homebrew/opt/openjdk@24/libexec/openjdk.jdk/Contents/Home
# macOS (Intel): /usr/local/opt/openjdk@24/libexec/openjdk.jdk/Contents/Home
# Linux: /usr/lib/jvm/java-24-openjdk-amd64
# Windows: C:\\Program Files\\Eclipse Adoptium\\jdk-24.0.2-hotspot
JAVA_HOME=/opt/homebrew/opt/openjdk@24/libexec/openjdk.jdk/Contents/Home

# JVM Options for FFI and Preview Features
JVM_OPTS=--enable-preview --enable-native-access=ALL-UNNAMED
MAVEN_OPTS=--enable-preview --enable-native-access=ALL-UNNAMED -Xmx4g -Xms2g

# =============================================================================
# Build Tool Paths
# =============================================================================

# Maven Configuration
MAVEN_HOME=/opt/homebrew/opt/maven/libexec
M2_HOME=/opt/homebrew/opt/maven/libexec

# Bazel Configuration
BAZEL_HOME=/opt/homebrew/bin
BAZELISK_HOME=/opt/homebrew/bin

# =============================================================================
# Compiler and Toolchain Configuration
# =============================================================================

# C/C++ Compiler Paths
# macOS (Apple Silicon)
CC=/opt/homebrew/opt/llvm/bin/clang
CXX=/opt/homebrew/opt/llvm/bin/clang++
# macOS (Intel)
# CC=/usr/local/opt/llvm/bin/clang
# CXX=/usr/local/opt/llvm/bin/clang++
# Linux
# CC=/usr/bin/gcc
# CXX=/usr/bin/g++

# Compiler Flags
CFLAGS=-O3 -march=native -Wall -Wextra
CXXFLAGS=-O3 -march=native -Wall -Wextra -std=c++17
LDFLAGS=-L/opt/homebrew/lib
CPPFLAGS=-I/opt/homebrew/include

# Cross-compilation toolchains (Linux)
# ARM64_CC=aarch64-linux-gnu-gcc
# ARM64_CXX=aarch64-linux-gnu-g++
# ARMHF_CC=arm-linux-gnueabihf-gcc
# ARMHF_CXX=arm-linux-gnueabihf-g++

# =============================================================================
# Library Paths
# =============================================================================

# Primary library search paths (platform-specific)
# macOS (Apple Silicon)
LIBRARY_PATH=/opt/homebrew/lib:/usr/local/lib:/usr/lib
PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig
DYLD_LIBRARY_PATH=/opt/homebrew/lib:/usr/local/lib

# macOS (Intel)
# LIBRARY_PATH=/usr/local/lib:/opt/homebrew/lib:/usr/lib
# PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/homebrew/lib/pkgconfig

# Linux
# LIBRARY_PATH=/usr/local/lib64:/usr/lib64:/usr/local/lib:/usr/lib
# LD_LIBRARY_PATH=/usr/local/lib64:/usr/lib64:/usr/local/lib:/usr/lib
# PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig

# Windows
# LIBRARY_PATH=C:\\msys64\\mingw64\\lib;C:\\Program Files\\LLVM\\lib
# PATH=%PATH%;C:\\msys64\\mingw64\\bin

# =============================================================================
# FastFilter Native Library Paths
# =============================================================================

# Native library search paths for different architectures
NATIVE_LIB_PATH_LINUX_X86_64=/usr/local/lib64:/usr/lib64:/usr/local/lib:/usr/lib
NATIVE_LIB_PATH_LINUX_ARM64=/usr/lib/aarch64-linux-gnu:/usr/local/lib
NATIVE_LIB_PATH_DARWIN_X86_64=/usr/local/lib:/opt/homebrew/lib
NATIVE_LIB_PATH_DARWIN_ARM64=/opt/homebrew/lib:/usr/local/lib
NATIVE_LIB_PATH_WINDOWS_X86_64=C:\\msys64\\mingw64\\lib;C:\\Windows\\System32

# Generic fallback paths
NATIVE_LIB_PATH=/opt/homebrew/lib:/usr/local/lib:/usr/lib

# =============================================================================
# Bazel Configuration
# =============================================================================

# Bazel build options
BAZEL_BUILD_OPTS=--jobs=auto --compilation_mode=opt --verbose_failures
BAZEL_TEST_OPTS=--test_output=errors --test_summary=detailed

# Platform-specific Bazel configurations
BAZEL_CONFIG_MACOS_ARM64=--cpu=darwin_arm64 --macos_minimum_os=11.0
BAZEL_CONFIG_MACOS_X86_64=--cpu=darwin_x86_64 --macos_minimum_os=10.15
BAZEL_CONFIG_LINUX_X86_64=--cpu=k8 --copt=-mavx2
BAZEL_CONFIG_LINUX_ARM64=--cpu=aarch64

# Remote cache (optional)
# BAZEL_REMOTE_CACHE=grpc://localhost:9092
# BAZEL_DISK_CACHE=/tmp/bazel-cache
# BAZEL_REPOSITORY_CACHE=/tmp/bazel-repo-cache

# =============================================================================
# Docker and QEMU Configuration
# =============================================================================

# Docker platform testing
DOCKER_DEFAULT_PLATFORM=linux/amd64
DOCKER_BUILDKIT=1

# QEMU binary paths (for cross-platform testing)
QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
QEMU_CPU=cortex-a72

# Test configuration flags
TEST_QEMU_ENABLED=false
TEST_DOCKER_ENABLED=false
TEST_FFI_ENABLED=true
TEST_INTEGRATION_ENABLED=true

# =============================================================================
# Development Tools
# =============================================================================

# CMake Configuration
CMAKE_BUILD_TYPE=Release
CMAKE_GENERATOR=Ninja
CMAKE_C_COMPILER=${CC}
CMAKE_CXX_COMPILER=${CXX}
CMAKE_PREFIX_PATH=/opt/homebrew

# Ninja build parallelism
NINJA_JOBS=8

# =============================================================================
# IDE and Editor Configuration
# =============================================================================

# VS Code Java settings
JAVA_SERVER_LAUNCH_MODE=Standard
JAVA_COMPILE_NULLANALYSIS_MODE=automatic
JAVA_CONFIGURATION_CHECKPROJECTSETTINGSEXCLUSIONS=false

# IntelliJ IDEA settings
IDEA_JDK=${JAVA_HOME}
IDEA_VM_OPTIONS=-Xmx4g -XX:ReservedCodeCacheSize=512m

# =============================================================================
# Logging and Debug Configuration
# =============================================================================

# Logging levels
JAVA_LOGGING_LEVEL=INFO
MAVEN_LOGGING_LEVEL=INFO
BAZEL_LOGGING_LEVEL=INFO

# Debug flags
DEBUG_FFI=false
DEBUG_NATIVE_LOADING=false
VERBOSE_COMPILATION=false

# =============================================================================
# Performance and Benchmarking
# =============================================================================

# JMH Benchmark configuration
JMH_FORKS=3
JMH_WARMUP_ITERATIONS=5
JMH_MEASUREMENT_ITERATIONS=10
JMH_THREADS=4
JMH_TIMEOUT=30s

# Native benchmark configuration
CPP_BENCHMARK_SIZE=1000000
CPP_BENCHMARK_ITERATIONS=10

# =============================================================================
# Platform Detection Override (optional)
# =============================================================================

# Force specific platform detection (useful for cross-compilation)
# FORCE_OS=linux
# FORCE_ARCH=aarch64
# FORCE_LIBC=musl

# =============================================================================
# CI/CD Configuration
# =============================================================================

# GitHub Actions environment
# These are typically set by the CI environment, but can be overridden
# CI=true
# GITHUB_ACTIONS=true
# RUNNER_OS=Linux
# RUNNER_ARCH=X64

# Act (local GitHub Actions) configuration
ACT_PLATFORM_UBUNTU=ghcr.io/catthehacker/ubuntu:act-latest
ACT_PLATFORM_MACOS=sickcodes/docker-osx:latest